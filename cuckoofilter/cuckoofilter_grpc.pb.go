// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cuckoofilter

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CuckooFilterClient is the client API for CuckooFilter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CuckooFilterClient interface {
	CreateFilter(ctx context.Context, in *CreateFilterRequest, opts ...grpc.CallOption) (*CreateFilterResponse, error)
	DeleteFilter(ctx context.Context, in *DeleteFilterRequest, opts ...grpc.CallOption) (*DeleteFilterResponse, error)
	ListFilters(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListFiltersResponse, error)
	InsertElement(ctx context.Context, in *InsertElementRequest, opts ...grpc.CallOption) (*InsertElementResponse, error)
	InsertElements(ctx context.Context, in *InsertElementsRequest, opts ...grpc.CallOption) (*InsertElementsResponse, error)
	DeleteElement(ctx context.Context, in *DeleteElementRequest, opts ...grpc.CallOption) (*DeleteElementResponse, error)
	CountElements(ctx context.Context, in *CountElementsRequest, opts ...grpc.CallOption) (*CountElementsResponse, error)
	ResetFilter(ctx context.Context, in *ResetFilterRequest, opts ...grpc.CallOption) (*ResetFilterResponse, error)
	LookupElement(ctx context.Context, in *LookupElementRequest, opts ...grpc.CallOption) (*LookupElementResponse, error)
	LookupElements(ctx context.Context, in *LookupElementsRequest, opts ...grpc.CallOption) (*LookupElementsResponse, error)
	LookupElementsStream(ctx context.Context, opts ...grpc.CallOption) (CuckooFilter_LookupElementsStreamClient, error)
}

type cuckooFilterClient struct {
	cc grpc.ClientConnInterface
}

func NewCuckooFilterClient(cc grpc.ClientConnInterface) CuckooFilterClient {
	return &cuckooFilterClient{cc}
}

func (c *cuckooFilterClient) CreateFilter(ctx context.Context, in *CreateFilterRequest, opts ...grpc.CallOption) (*CreateFilterResponse, error) {
	out := new(CreateFilterResponse)
	err := c.cc.Invoke(ctx, "/cuckoofilter.CuckooFilter/CreateFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuckooFilterClient) DeleteFilter(ctx context.Context, in *DeleteFilterRequest, opts ...grpc.CallOption) (*DeleteFilterResponse, error) {
	out := new(DeleteFilterResponse)
	err := c.cc.Invoke(ctx, "/cuckoofilter.CuckooFilter/DeleteFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuckooFilterClient) ListFilters(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListFiltersResponse, error) {
	out := new(ListFiltersResponse)
	err := c.cc.Invoke(ctx, "/cuckoofilter.CuckooFilter/ListFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuckooFilterClient) InsertElement(ctx context.Context, in *InsertElementRequest, opts ...grpc.CallOption) (*InsertElementResponse, error) {
	out := new(InsertElementResponse)
	err := c.cc.Invoke(ctx, "/cuckoofilter.CuckooFilter/InsertElement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuckooFilterClient) InsertElements(ctx context.Context, in *InsertElementsRequest, opts ...grpc.CallOption) (*InsertElementsResponse, error) {
	out := new(InsertElementsResponse)
	err := c.cc.Invoke(ctx, "/cuckoofilter.CuckooFilter/InsertElements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuckooFilterClient) DeleteElement(ctx context.Context, in *DeleteElementRequest, opts ...grpc.CallOption) (*DeleteElementResponse, error) {
	out := new(DeleteElementResponse)
	err := c.cc.Invoke(ctx, "/cuckoofilter.CuckooFilter/DeleteElement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuckooFilterClient) CountElements(ctx context.Context, in *CountElementsRequest, opts ...grpc.CallOption) (*CountElementsResponse, error) {
	out := new(CountElementsResponse)
	err := c.cc.Invoke(ctx, "/cuckoofilter.CuckooFilter/CountElements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuckooFilterClient) ResetFilter(ctx context.Context, in *ResetFilterRequest, opts ...grpc.CallOption) (*ResetFilterResponse, error) {
	out := new(ResetFilterResponse)
	err := c.cc.Invoke(ctx, "/cuckoofilter.CuckooFilter/ResetFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuckooFilterClient) LookupElement(ctx context.Context, in *LookupElementRequest, opts ...grpc.CallOption) (*LookupElementResponse, error) {
	out := new(LookupElementResponse)
	err := c.cc.Invoke(ctx, "/cuckoofilter.CuckooFilter/LookupElement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuckooFilterClient) LookupElements(ctx context.Context, in *LookupElementsRequest, opts ...grpc.CallOption) (*LookupElementsResponse, error) {
	out := new(LookupElementsResponse)
	err := c.cc.Invoke(ctx, "/cuckoofilter.CuckooFilter/LookupElements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuckooFilterClient) LookupElementsStream(ctx context.Context, opts ...grpc.CallOption) (CuckooFilter_LookupElementsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CuckooFilter_ServiceDesc.Streams[0], "/cuckoofilter.CuckooFilter/LookupElementsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cuckooFilterLookupElementsStreamClient{stream}
	return x, nil
}

type CuckooFilter_LookupElementsStreamClient interface {
	Send(*LookupElementsStreamRequest) error
	Recv() (*LookupElementsStreamResponse, error)
	grpc.ClientStream
}

type cuckooFilterLookupElementsStreamClient struct {
	grpc.ClientStream
}

func (x *cuckooFilterLookupElementsStreamClient) Send(m *LookupElementsStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cuckooFilterLookupElementsStreamClient) Recv() (*LookupElementsStreamResponse, error) {
	m := new(LookupElementsStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CuckooFilterServer is the server API for CuckooFilter service.
// All implementations must embed UnimplementedCuckooFilterServer
// for forward compatibility
type CuckooFilterServer interface {
	CreateFilter(context.Context, *CreateFilterRequest) (*CreateFilterResponse, error)
	DeleteFilter(context.Context, *DeleteFilterRequest) (*DeleteFilterResponse, error)
	ListFilters(context.Context, *empty.Empty) (*ListFiltersResponse, error)
	InsertElement(context.Context, *InsertElementRequest) (*InsertElementResponse, error)
	InsertElements(context.Context, *InsertElementsRequest) (*InsertElementsResponse, error)
	DeleteElement(context.Context, *DeleteElementRequest) (*DeleteElementResponse, error)
	CountElements(context.Context, *CountElementsRequest) (*CountElementsResponse, error)
	ResetFilter(context.Context, *ResetFilterRequest) (*ResetFilterResponse, error)
	LookupElement(context.Context, *LookupElementRequest) (*LookupElementResponse, error)
	LookupElements(context.Context, *LookupElementsRequest) (*LookupElementsResponse, error)
	LookupElementsStream(CuckooFilter_LookupElementsStreamServer) error
	mustEmbedUnimplementedCuckooFilterServer()
}

// UnimplementedCuckooFilterServer must be embedded to have forward compatible implementations.
type UnimplementedCuckooFilterServer struct {
}

func (UnimplementedCuckooFilterServer) CreateFilter(context.Context, *CreateFilterRequest) (*CreateFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilter not implemented")
}
func (UnimplementedCuckooFilterServer) DeleteFilter(context.Context, *DeleteFilterRequest) (*DeleteFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFilter not implemented")
}
func (UnimplementedCuckooFilterServer) ListFilters(context.Context, *empty.Empty) (*ListFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilters not implemented")
}
func (UnimplementedCuckooFilterServer) InsertElement(context.Context, *InsertElementRequest) (*InsertElementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertElement not implemented")
}
func (UnimplementedCuckooFilterServer) InsertElements(context.Context, *InsertElementsRequest) (*InsertElementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertElements not implemented")
}
func (UnimplementedCuckooFilterServer) DeleteElement(context.Context, *DeleteElementRequest) (*DeleteElementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteElement not implemented")
}
func (UnimplementedCuckooFilterServer) CountElements(context.Context, *CountElementsRequest) (*CountElementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountElements not implemented")
}
func (UnimplementedCuckooFilterServer) ResetFilter(context.Context, *ResetFilterRequest) (*ResetFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetFilter not implemented")
}
func (UnimplementedCuckooFilterServer) LookupElement(context.Context, *LookupElementRequest) (*LookupElementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupElement not implemented")
}
func (UnimplementedCuckooFilterServer) LookupElements(context.Context, *LookupElementsRequest) (*LookupElementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupElements not implemented")
}
func (UnimplementedCuckooFilterServer) LookupElementsStream(CuckooFilter_LookupElementsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LookupElementsStream not implemented")
}
func (UnimplementedCuckooFilterServer) mustEmbedUnimplementedCuckooFilterServer() {}

// UnsafeCuckooFilterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CuckooFilterServer will
// result in compilation errors.
type UnsafeCuckooFilterServer interface {
	mustEmbedUnimplementedCuckooFilterServer()
}

func RegisterCuckooFilterServer(s grpc.ServiceRegistrar, srv CuckooFilterServer) {
	s.RegisterService(&CuckooFilter_ServiceDesc, srv)
}

func _CuckooFilter_CreateFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuckooFilterServer).CreateFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cuckoofilter.CuckooFilter/CreateFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuckooFilterServer).CreateFilter(ctx, req.(*CreateFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuckooFilter_DeleteFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuckooFilterServer).DeleteFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cuckoofilter.CuckooFilter/DeleteFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuckooFilterServer).DeleteFilter(ctx, req.(*DeleteFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuckooFilter_ListFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuckooFilterServer).ListFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cuckoofilter.CuckooFilter/ListFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuckooFilterServer).ListFilters(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuckooFilter_InsertElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertElementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuckooFilterServer).InsertElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cuckoofilter.CuckooFilter/InsertElement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuckooFilterServer).InsertElement(ctx, req.(*InsertElementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuckooFilter_InsertElements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertElementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuckooFilterServer).InsertElements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cuckoofilter.CuckooFilter/InsertElements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuckooFilterServer).InsertElements(ctx, req.(*InsertElementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuckooFilter_DeleteElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteElementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuckooFilterServer).DeleteElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cuckoofilter.CuckooFilter/DeleteElement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuckooFilterServer).DeleteElement(ctx, req.(*DeleteElementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuckooFilter_CountElements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountElementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuckooFilterServer).CountElements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cuckoofilter.CuckooFilter/CountElements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuckooFilterServer).CountElements(ctx, req.(*CountElementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuckooFilter_ResetFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuckooFilterServer).ResetFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cuckoofilter.CuckooFilter/ResetFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuckooFilterServer).ResetFilter(ctx, req.(*ResetFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuckooFilter_LookupElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupElementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuckooFilterServer).LookupElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cuckoofilter.CuckooFilter/LookupElement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuckooFilterServer).LookupElement(ctx, req.(*LookupElementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuckooFilter_LookupElements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupElementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuckooFilterServer).LookupElements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cuckoofilter.CuckooFilter/LookupElements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuckooFilterServer).LookupElements(ctx, req.(*LookupElementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuckooFilter_LookupElementsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CuckooFilterServer).LookupElementsStream(&cuckooFilterLookupElementsStreamServer{stream})
}

type CuckooFilter_LookupElementsStreamServer interface {
	Send(*LookupElementsStreamResponse) error
	Recv() (*LookupElementsStreamRequest, error)
	grpc.ServerStream
}

type cuckooFilterLookupElementsStreamServer struct {
	grpc.ServerStream
}

func (x *cuckooFilterLookupElementsStreamServer) Send(m *LookupElementsStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cuckooFilterLookupElementsStreamServer) Recv() (*LookupElementsStreamRequest, error) {
	m := new(LookupElementsStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CuckooFilter_ServiceDesc is the grpc.ServiceDesc for CuckooFilter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CuckooFilter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cuckoofilter.CuckooFilter",
	HandlerType: (*CuckooFilterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFilter",
			Handler:    _CuckooFilter_CreateFilter_Handler,
		},
		{
			MethodName: "DeleteFilter",
			Handler:    _CuckooFilter_DeleteFilter_Handler,
		},
		{
			MethodName: "ListFilters",
			Handler:    _CuckooFilter_ListFilters_Handler,
		},
		{
			MethodName: "InsertElement",
			Handler:    _CuckooFilter_InsertElement_Handler,
		},
		{
			MethodName: "InsertElements",
			Handler:    _CuckooFilter_InsertElements_Handler,
		},
		{
			MethodName: "DeleteElement",
			Handler:    _CuckooFilter_DeleteElement_Handler,
		},
		{
			MethodName: "CountElements",
			Handler:    _CuckooFilter_CountElements_Handler,
		},
		{
			MethodName: "ResetFilter",
			Handler:    _CuckooFilter_ResetFilter_Handler,
		},
		{
			MethodName: "LookupElement",
			Handler:    _CuckooFilter_LookupElement_Handler,
		},
		{
			MethodName: "LookupElements",
			Handler:    _CuckooFilter_LookupElements_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LookupElementsStream",
			Handler:       _CuckooFilter_LookupElementsStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cuckoofilter/cuckoofilter.proto",
}
